# Processes:

A process is represented in memory with 3 sections:

1: First sections contains 3 underlying segments: ".text" ".data" ".bss"
   1.1: ".text" is basically the part of memory where we find the code
        or the emsemble of instructions related to the process execution.
        It's a read-only memory segment and immutable.
   1.2: ".data" contains the initialized global and static variables.
   1.3: ".bss" contains the uninitialized global and static variables.

3: The stack is where we find the local variables of the called functions and the "Stack Frame" of these functions.
   The "Stack Frame" is the memory area where all informations necessary to the call of the functions exist.

2: The heap is the area where we find dynamically allocated memory (e.g. malloc() or calloc()).
   It doesn't have a fix size and the more allocations made inside this section, the closest it gets to the stack.

# Registers:

A register is a memory area inside the processor and the fastest one in comparison to the central memory (RAM) or caches.
There is different types of registers and its number varies from an architecture to another.
For instance, x86 32-bits architectures has 8 registers, EAX, EBX, ECX, EDX ESP, EBP, ESI and EDI.
First 4 registers serves as temporary memory while the program is executed.
ESP and EBP serve as pointers, they store 32-bits address (address of a memory location).

Another special register is EIP, it's called the Instruction Pointer and contains the address of the next instuction
to be executed.
